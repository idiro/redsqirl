            ------
            Red Sqirl - Package Development
            ------

What is a package
	
	Packages are groups of actions that are used in Red Sqirl to perform specific processes on Red Sqirl. 
	They generally run on the same platform , e.g,. Pig , Hive 
	etc. This how Red Sqirl modularises its functionalities and manages what is available for the users.

What is in a package

	A Package will contain actions that can be used on Red Sqirl once it is installed. 
	An action will be composed of a Java class a help file and an image file.

Create a package


	In order to create a package, the first step is to set up a {{{https://maven.apache.org/}maven}} project with a unique group and artifact id.

	A template of a pom file can be downloaded from {{{./files/pom.xml}here}}.
        You will then need to edit the pom with the necessary dependencies and configuration specific to your package. 

+---+
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<generated.pck.dir>${project.build.directory}/${project.artifactId}-${project.version}/</generated.pck.dir>
		<resources.pck.dir>src/main/pck</resources.pck.dir>
		<maven.build.timestamp.format>yyyy-MM-dd</maven.build.timestamp.format>
		<timestamp>${maven.build.timestamp}</timestamp>
		<redsqirl.version>1.0.4-0.1</redsqirl.version>
	</properties>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.6</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9</version>
				<configuration>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>

			<!-- Copy Package property -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${generated.pck.dir}</outputDirectory>
							<resources>
								<resource>
									<directory>${resources.pck.dir}</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- Copy the generated jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.8</version>
				<executions>
					<execution>
						<id>copy-artifact</id>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>${project.artifactId}</artifactId>
									<version>${project.version}</version>
									<type>${project.packaging}</type>
								</artifactItem>
							</artifactItems>
							<outputDirectory>${generated.pck.dir}/lib/</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Zip the package ready to be installed or uploaded on the analytics store -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<executions>
					<execution>
						<id>zip_pck</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>${project.artifactId}-${project.version}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<descriptor>src/main/assembly/zip_pck.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>

				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>idiro</groupId>
			<artifactId>redsqirl-wf-interface</artifactId>
			<version>${redsqirl.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>idiro</groupId>
			<artifactId>redsqirl-workflow</artifactId>
			<version>${redsqirl.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.12</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

+--------------------------------------+

How to deploy a package

 [[1]] Log in to the {{{http://95.45.250.249:8091/analytics-store}Analytics Store}}

 [[2]] Go to the Red Sqirl >> Package

 [[3]] Click on the New Module button

 [[4]] Fill out the form, give an image to your module and click Save

 [[5]] On the new package line, click on "Versions" button

 [[6]] Click on the New Version button

 [[7]] Fill out the form and click save

   * The price field is not used at the moment so you can write "Free"

   * The type access is either PUBLIC, everybody can find and download your package, or PRIVATE, nobody can except you.

   * The file field will expect the zip file produced by the pom

   * If your package depends on another package, please specify in the "dependency" section

How to install a package

* From Red Sqirl

 [[1]] Log in to your Red Sqirl Instance

 [[2]] Click on Software >> Install Package

 [[3]] Choose the scope and click "Install"

 [[4]] Log in with your analytics store details or create your account

 [[5]] Search the package you wish to install

 [[6]] Click install

* Manually

 [[1]] Log in to the {{{http://95.45.250.249:8091/analytics-store}Analytics Store}}

 [[2]] Click on Red Sqirl >> Search

 [[3]] Click on the package you wish to install

 [[4]] Click on Request a key and specify the installation name

 [[5]] Specify the scope (System means that is share by all users) and click 'OK'

 [[6]] Download the zip file

 [[7]] As the installer user execute the script  

+--------------------------------------+
bin/add_package_system.sh ${zip_file}
+--------------------------------------+

 or

+--------------------------------------+
bin/add_package_user.sh ${user_name} ${zip_file}
+--------------------------------------+

 [[8]] Download the licence key file (button on the bottom left of the module table) 

 [[9]] Copy the licence key file after download in conf/licenseKey.properties    
