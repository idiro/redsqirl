
Package Development

	This Tutorial will show developers how to develop an action with multiple interactions that interact with each other.
	There will be three interactions that all use the columns/features from the input dataset. The first interaction will be a 
	list interaction that list the features of the dataset. This interaction will set the first column to appear in the third action.
	
	The second interaction will be an append interaction that lists the remaining columns of the input dataset. The append interaction will 
	add the remaining columns to display in the third interaction.
	
	The third and final interaction is a table interacion that displays the first ten rows of the input data with the columns that were selected in
	the first and sencond interaction. There is no value to the action except for the demonstration of the interactivity between interactions.
	
	
	You can download the resulting project {{{./files/multi-interaction.zip}here}}.
Create a package


 [[1]]Step 1

	Follow the Tutorial to create the project provided or download the Example Project for this tutorial {{{./pckdev.html}Here}} . 

 [[2]]Step 2

	In the previous step we created a project that contains all the dependencies and an abstract class that will be the base class for the package.
	
	Next Steps:
	
	Create a new class called 'Demo' that extends a class called 'DataFlowAction'
	
	[]
	
	Lets start the class with the members necessary. The Class 'DemoTable' has not been created yet so there will be errors untill it is created.
	
+-----------------+
	//Demo Pages
	private Page page1, page2, page3;
	//input map
	protected Map<String, DFELinkProperty> input;
	//Demo List Interaction
	public ListInteraction demoList;
	//Demo Append ListInteraction
	public AppendListInteraction demoappendList;
	//Demo Table
	public DemoTable demoTable;
	//Key for referencing the input
	public static String key_input = "in";
+-----------------+

	Create a new java package for interactiond and under that package create a class called 'DemoTable'. The class needs to extend 'TableInteraction'.
	The only member of the interaction is HDFSInterface.
	
+-----------------+
	//HDFS interface used in the update
	private HDFSInterface hInt;
+-----------------+
	
	The constructor for interaction sets a few properties, the data tree and initializes the 'HDFSInterface'.

+-----------------+
public DemoTable(String id, String name, String legend, int column,
	int placeInColumn) throws RemoteException {
    super(id, name, legend, column, placeInColumn);
    //initialize the hdfs
    hInt = new HDFSInterface();
    //initialize the tree
    if (tree.isEmpty()) {
	tree.add("table").add("columns");
    }
}
+-----------------+
	
	This section of the tutorial is for the {update} method of the interaction. It will take the two interactions (list and append) and the input object (DFEOutput)
	as parameters. 
	
	The first section is to generate columns from the interactions provided.
	
+-----------------+
//update the table takes the input ,the list interacion and the append list
public void update(DFEOutput in, ListInteraction list,
	AppendListInteraction append) throws RemoteException {
    if (list != null && list.getValue() != null) {
	//create a column from the value of the list interaction
	addColumn(list.getValue(), null, null, null);
    }
    if (append.getValues() != null && !append.getValues().isEmpty()) {
	Iterator<String> vals = append.getValues().iterator();
	while (vals.hasNext()) {
	    //create a column from the values of the append list interaction
	    addColumn(vals.next(), null, null, null);
	}
    }
+-----------------+

	Get the features from the input and generate a map of features and positions for string reading. 
	
+-----------------+
//get the input path
    String path = in.getPath();
    //get the input feats
    Iterator<String> feats = in.getFields().getFieldNames().iterator();
    //a map to hold feats and positions
    Map<String, Integer> featsAndPos = new HashMap<String, Integer>();
    int pos = 0;
    // get the columns that we generated from the list and append list
    // interaction
    List<String> columns = getColumnNames();
    while (feats.hasNext()) {
	String feaName = feats.next();
	if(columns.contains(feaName)){
	    //add acceptable features and their positions
	    featsAndPos.put(feats.next(), pos);
	}
	++pos;
    }
+-----------------+

	With a map of features and positions generated we can select the data from the input and split them by the delimiter so we can read the data with the selected features.
	We get the input path and the delimiter and use the HDFSInterface to select the data from HDFS. We Iterate over the result and split each result by the delimiter selected.
	For each row we iterate over the map of features and positions and add the features to a row . Once a row is complete it is added to the entire list of rows, with is used 
	with the 'updateGenerator' method which takes the generator name to use and the list of rows for the generator.
	
	A generator is a table interaction sub action. A Table interaction can have different rows which can be split up by the using a generator action. The generator itself appears
	above the table.
	
	Once the 'updateGenerator' method is called the update method for 'DemoTable' is completed.

+-----------------+
    //list of maps that are used for rows
    List<Map<String, String>> newRows = new LinkedList<Map<String, String>>();
    //get the delimiter for the input
    String delimiter = in.getProperties().get(MapRedTextType.key_delimiter);

    //get the data from the input as a list of the rows
    Iterator<String> result = hInt.select(path, delimiter, 10).iterator();
    Map<String, String> row = null;
    while (result.hasNext()) {
	String entireRow = result.next();
	if (entireRow != null & !entireRow.isEmpty()) {
	    //split the row on the delimiter
	    String[] rowvals = entireRow.split(delimiter);
	    row = new HashMap<String, String>();
	    Iterator<String> keysIt = featsAndPos.keySet().iterator();
	    while (keysIt.hasNext()) {
		String key = keysIt.next();
		//add a cell associated with the current acceptable
		//column/input feature
		row.put(key, rowvals[featsAndPos.get(key)]);
	    }
	}
	//add o to the list of rows
	newRows.add(row);
	//reset the row
	row = null;
    }
    //add the rows generated to he interaction under the title 'display'
    updateGenerator("display", newRows);

}
+-----------------+
	
	With the 'DemoTable' class implemented and completed we can return to the 'Demo' action and look at the constructor. The constructor will set the
	oozie action type , initialize the input map, add three seperate pages for each interaction and add each interaction to a page.
	
+-----------------+
//Demo Pages
private Page page1, page2, page3;
//input map
protected Map<String, DFELinkProperty> input;
//Demo List Interaction
public ListInteraction demoList;
//Demo Append ListInteraction
public AppendListInteraction demoappendList;
//Demo Table
public DemoTable demoTable;
//Key for referencing the input
public static String key_input = "in";

public Demo() throws RemoteException {
    //Set the Oozie Action type
    super(new PigAction());
    //Make Sure input map is useable
    if (input == null) {
	Map<String, DFELinkProperty> in = new LinkedHashMap<String,
DFELinkProperty>();
	in.put(key_input, new DataProperty(MapRedTextType.class, 1, 1));
	input = in;
    }
    //Add a page to demo the list interaction
    page1 = addPage(
	    "Demo List",
	    "This Page will demonstrate a list interaction that contains the
list of feature names from the input",
	    1);
    //initialize the list interaction
    demoList = new ListInteraction(
	    "demolist",
	    "Demo List ",
	    "Demo List that selects one column from the features from the
input",
	    1, 0);
    //add the list interaction to the page
    page1.addInteraction(demoList);
    //add a page for the list interaction
    page2 = addPage(
	    "Demo Append List",
	    "This page demos appendable list of remaining features from the
input",
	    1);
    //initialize the append list interaction
    demoappendList = new AppendListInteraction(
	    "dempappendlist",
	    "Demo AppendList",
	    "Select the remaining features from the input for the next
step",
	    0, 1);
    //add append list interaction to the page
    page2.addInteraction(demoappendList);
    //add a page for the table interaction
    page3 = addPage("Demo Table",
	    "This page demonstrates a table interaction", 1);
    
    //initialize the demo table interaction
    demoTable = new DemoTable(
	    "demotable",
	    "Demo Table",
	    "This table Demos the values recieved from the List interaction
and the AppendList Interaction by displaying the columns selected in each",
	    1, 0);
    //add the table interaction to the page
    page3.addInteraction(demoTable);

}
+-----------------+

	There are a few methods that need to be implemented but for this tutorial do not really add any functionalities.  

+-----------------+
    @Override
    public String getName() throws RemoteException {
	//return the action name
	return "demo";
    }

    @Override
    public Map<String, DFELinkProperty> getInput() throws RemoteException {
	//return the input links
	return input;
    }

    @Override
    public String updateOut() throws RemoteException {
	//for demonstration purposes we leave the output blank
	return null;
    }

    @Override
    public boolean writeOozieActionFiles(File[] files) throws RemoteException {
	//for demonstration purposes we leave the write oozie action blank
	return false;
    }
+-----------------+
	
	The final method of the action is the update method which will update all interactions that are contained in the action.
	It's only parameter is a UserInteraction. This parameter is a way to confirm which interaction is to be updated. 
	
	The update for the list interaction (first interaction) is a simple setting of the values to display by getting the input's feature names 
	and setting a default value.
	
	The append list interaction is the same process as the list interaction except we remove the value that is set for the list interaction as a possible value 
	for the append list.
	
	The final interaction to update is the 'DemoTable' interaction which is specified {{{update}here}}.
	
	For this action	out update method should resemble the code below. 
	
+-----------------+
//update method for the action that update all specified interactions
@Override
public void update(DFEInteraction interaction) throws RemoteException {
    DFEOutput in = getDFEInput().get(key_input).get(0);
    //chech that there is inputs available
    if (in != null) {
	if (interaction.getId().equals(demoList.getId())) {
	    //set the values to appear in the list
	    demoList.setPossibleValues(in.getFields().getFieldNames());
	    //set the default value
	    demoList.setValue(in.getFields().getFieldNames().get(0));
	} else if (interaction.getId().equals(demoappendList.getId())) {
	    List<String> appendlist = in.getFields().getFieldNames();
	    appendlist.remove(demoList.getValue());
	    //set the values to appear in the append list
	    demoappendList.setPossibleValues(appendlist);
	    //set the default values to be empty
	    demoappendList.setValues(new LinkedList<String>());
	} else if (interaction.getId().equals(demoTable.getId())) {
	    //update the table interaction 
	    demoTable.update(in, demoList, demoappendList);
	}
    }

}
+-----------------+

	With the last update method complete the entire action is finished and ready for use.
