
What is a package
	
	Packages are a group of actions that are used in IDM to perform specific processes on IDM. 
	They generally run on the same platform , e.g,. Pig , Hive 
	etc. This how IDM mudualarises its functionalities and manages what is available for the users.

What is in a  Package

	A Package will contain actions that can be used on IDM once the package is installed. 
	An action will have two files that are required , these are the help and image files.
	
Create a package


 [[1]]Step 1

	Create new project as maven give a group id and an artifact id

	Edit pom to add necessary dependencies and configuration for packaging the package 
	

+---+
<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<main.pck>${project.build.directory}/${project.artifactId}-${project.version}/</main.pck>
		<target.pck>src/main/pck</target.pck>
		<maven.build.timestamp.format>yyyy-MM-dd</maven.build.timestamp.format>
		<timestamp>${maven.build.timestamp}</timestamp>
		<pck-repo>${basedir}/src/main/pck-repo</pck-repo>
		<target.pck-repo>${basedir}/target/pck-repo-${project.artifactId}-${project.version}</target.pck-repo>
	</properties>

	<distributionManagement>
		<repository>
			<id>internal</id>
			<name>Internal Release Repository</name>
			<url>scp://dev.local.net/var/www/html/apache-archiva-1.3.6/data/repositories/internal</url>
		</repository>

		<snapshotRepository>
			<id>snapshots</id>
			<name>Internal Snapshot Repository</name>
			<url>scp://dev.local.net/var/www/html/apache-archiva-1.3.6/data/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<organization>
		<name>Idiro Technologies</name>
		<url>http://www.idiro.com</url>
	</organization>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.6</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9</version>
				<configuration>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<build>

		<extensions>
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ssh</artifactId>
				<version>1.0</version>
			</extension>
		</extensions>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<outputDirectory>${main.pck}/lib/</outputDirectory>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
				<version>1.5.2</version>
				<executions>
					<execution>
						<id>create-pck-repo-sql</id>
						<phase>package</phase>
						<goals>
							<goal>replace</goal>
						</goals>
						<configuration>
							<file>${pck-repo}/record_repo.sql</file>
							<outputFile>${target.pck-repo}/record_repo.sql</outputFile>
							<replacements>
								<replacement>
									<token>#{ARTIFACTID}</token>
									<value>${project.artifactId}</value>
								</replacement>
								<replacement>
									<token>#{NAME}</token>
									<value>${project.name}</value>
								</replacement>
								<replacement>
									<token>#{DESCRIPTION}</token>
									<value>${project.description}</value>
								</replacement>
								<replacement>
									<token>#{VERSION}</token>
									<value>${project.version}</value>
								</replacement>
								<replacement>
									<token>#{TIMESTAMP}</token>
									<value>${timestamp}</value>
								</replacement>
							</replacements>
							<regex>false</regex>
						</configuration>
					</execution>
					<execution>
						<id>create-pck-repo-html</id>
						<phase>package</phase>
						<goals>
							<goal>replace</goal>
						</goals>
						<configuration>
							<file>${pck-repo}/idm-hama.html</file>
							<outputFile>${target.pck-repo}/${project.artifactId}-${project.version}.html</outputFile>
							<replacements>
								<replacement>
									<token>#{ARTIFACTID}</token>
									<value>${project.artifactId}</value>
								</replacement>
								<replacement>
									<token>#{NAME}</token>
									<value>${project.name}</value>
								</replacement>
								<replacement>
									<token>#{DESCRIPTION}</token>
									<value>${project.description}</value>
								</replacement>
								<replacement>
									<token>#{VERSION}</token>
									<value>${project.version}</value>
								</replacement>
								<replacement>
									<token>#{TIMESTAMP}</token>
									<value>${timestamp}</value>
								</replacement>
							</replacements>
							<regex>false</regex>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${main.pck}</outputDirectory>
							<resources>
								<resource>
									<directory>${target.pck}</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<executions>
					<execution>
						<id>zip_pck</id> 
						<phase>package</phase> 
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>${project.artifactId}-${project.version}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<outputDirectory>${target.pck-repo}</outputDirectory>
							<descriptors>
								<descriptor>src/main/assembly/zip_pck.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
					<execution>
						<id>zip_repo</id> 
						<phase>package</phase> 
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>pck-repo-${project.artifactId}-${project.version}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<descriptors>
								<descriptor>src/main/assembly/zip_repo.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>

		<dependency>
			<groupId>idiro</groupId>
			<artifactId>idm-wf-interface</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>idiro</groupId>
			<artifactId>idm-workflow</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.12</version>
			<scope>compile</scope>
		</dependency>

	</dependencies>

+--------------------------------------+
	* Create a new package under source main
	
	* Create an abstract class so it extends 'DataFlowAction'
	
	* For the purposes of the tutorial , this abstract class will be called 'DemoAction'
	
	These steps are the basic steps to create a project that will allow for development of a package that can be used in IDM

	The skeleton of the project can be found here :  CREATE A LINK

	<<Outcome:>> A project that contains an abstract class that will allow for creating new actions

 [[2]]Step 2

	In the previous step we created a project that contains all the dependencies and an abstract class that will be the base class for the package.
	
	For the purposes of this tutorial we will create the package so that it runs over Pig.
	To configure the package to run Pig processes  the 'DemoAction' the constructor must be 
	canged so that it calls the superclass construnctor with a 'new PigAction()'

+-----------+
public DemoAction() throws RemoteException {
		super(new PigAction());
	}
+-----------+
	
	This sets the type of action that Oozie will generate. 
	From there the rest of the methods should be implemented that are inherited from the parent class 'DataFlowAction'

+-----------+
public String getName() throws RemoteException {
		
		return "sample";
	}
+-----------+

