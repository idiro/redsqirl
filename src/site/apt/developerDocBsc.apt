
Package Development

	This Tutorial will show developers how to develop an action with one interaction.
	
Create a package


 [[1]]Step 1

	Follow the Tutorial to create the project provided in {{{./pckdev.html}Here}} or download the Example Project. 

 [[2]]Step 2

	In the previous step we created a project that contains all the dependencies and an abstract class that will be the base class for the package.
	
	Next Steps:
	
	Create a new class called 'Sample' that extends a class called 'DataFlowAction'
	
	[]
	
	Lets start the class with the members necessary.
	
+-----------------+
	// Page that holds interactions, title and legend
	private Page page;
	//Map of inputs for the action
	private Map<String, DFELinkProperty> input;
	//interaction that is an input interaction
	public InputInteraction sample;
+-----------------+

	The constructor is where page , sample and input is initialized.
	
+-----------------+
public Sample() throws RemoteException {
	//set the oozie action type
	super(new PigAction());
	//check if input is null
	if (input == null) {
		//initialize input map and add an entry
		input = new LinkedHashMap<String, DFELinkProperty>();
		input.put("in", new DataProperty(MapRedTextType.class, 1, 1));
	}
	//add a new page with title and legend and number of columns
	page = addPage("Sample", "Sample a dataset", 1);
	//initialize the interaction with id, title , legend , position in column and column number
	sample = new InputInteraction("samlpeinput", "Sample Interaction",
			"Set the rate to sample the dataset", 0, 1);
	//set the regex for checking the input
	sample.setRegex("[\\-\\+]?[0-9]*(\\.[0-9]+)?");
	//set default value for sample
	sample.setValue("0.7");
	//add interaction to the page
	page.addInteraction(sample);
}
+-----------------+

	We then have to implement getters for the input and the name of the action. This is necessary for methods in other parts of the framework.

+-----------------+
@Override
public String getName() throws RemoteException {
	return "sample";
}

@Override
public Map<String, DFELinkProperty> getInput() throws RemoteException {
	return input;
}
+-----------------+

	When an action is configured it needs to have an output for the result. For this to happen we need to update a member that is inherited from 'DataFlowAction'.
	This method is called 'updateOut'.
	
+-----------------+
@Override
public String updateOut() throws RemoteException {
	//check interactions for errors
	String error = checkIntegrationUserVariables();
	if (error == null) {
		//get the input features list
		FeatureList new_features = getDFEInput().get("in").get(0)
				.getFeatures();
		if (output.get("out") == null) {
			//add a new output to the map
			output.put("out", new MapRedTextType());
		}
		//set the features of the output
		output.get("out").setFeatures(new_features);
		//add a delimiter to the output
		output.get("out").addProperty(MapRedTextType.key_delimiter, "|");
	}
	return error;
}
+-----------------+

	An action has a method that updates the interactions. It checks the name of the interaction passed updates it if names match.
	Each interaction's update method is differrent from others so it is important to identify the right interaction when updating.
	For this action there is no need to update the interaction as we have configured it in the constructor.
	
+-----------------+
@Override
public void update(DFEInteraction interaction) throws RemoteException {
}
+-----------------+

	With all the prerequisits finished we can look at the  last methods of the action . These methods relate to the query generation and storing the query to a file.
	For the query generation we will look at the methods 'getQuery()' and 'getLoadQueryPiece(DFEOutput out)'.
	
+-----------------+
public String getQuery() throws RemoteException {
	//Create a query string
	String query = null;
	//check if the input is null
	if (getDFEInput() != null) {
		//get the input for the action
		DFEOutput in = getDFEInput().get("in").get(0);
		// Output
		//get the output for the action
		DFEOutput out = output.values().iterator().next();
		//set the bag for loading the data
		String loader = "READ";
		//set the load query piece method is explaned below
		String load = loader + " = LOAD " + getLoadQueryPiece(in) + ";\n\n";
		//set the sample query piece by getting the value from the sample interaction
		String sampletxt = "SAMPLEDATA" + " = SAMPLE " + loader + " "
				+ sample.getValue() + ";\n";
		//store the results from the sample into the output path 
		String store = "STORE SAMPLEDATA INTO '" + out.getPath()
				+ "' USING PigStorage('|');";
		//build the query string
		if (sampletxt != null || !sampletxt.isEmpty()) {
			query = load;
			query += sampletxt;
			query += store;
		}
	}
	return query;

}

public String getLoadQueryPiece(DFEOutput in) throws RemoteException {
	//get the delimiter
	String delimiter = in.getProperty(MapRedTextType.key_delimiter);
	delimiter = ((MapRedTextType) in).getPigDelimiter();
	//if delimiter is empty assign it one
	if (delimiter == null) {
		delimiter = "\001";
	}
	//set the pig storage function
	String function = "PigStorage('" + delimiter + "')";
	// set the path to load from with the function
	String createSelect = "'" + in.getPath() + "' USING " + function
			+ " as (";
	// get iterator of features from the input
	Iterator<String> it = in.getFeatures().getFeaturesNames().iterator();
	//iterate over each feature and add them to the 'load as piece'
	while (it.hasNext()) {
		String e = it.next();
		// get the pig type of the feature , may not be string or bigint but
		// chararray or int
		createSelect += e
				+ ":"
				+ PigTypeConvert.getPigType(in.getFeatures()
						.getFeatureType(e));
		if (it.hasNext()) {
			createSelect += ", ";
		}
	}
	//close the query piece
	createSelect += ")";
	//return query piece
	return createSelect;	
}
+-----------------+

	The Final method to implement is the 'writeOozieActionFiles(File[] files)'. This method writes the query to a file that is needed for the oozie action.
	It calls the 'getQuery()' method and then writes it to file for Oozie to use.
 
+-----------------+
@Override
public boolean writeOozieActionFiles(File[] files) throws RemoteException {
	//get the query
	String toWrite = getQuery();
	//check if the query is null
	boolean ok = toWrite != null;
	if (ok) {
		logger.info("Content of " + files[0].getName() + ": " + toWrite);
		try {
			//open a file writer with the file given
			FileWriter fw = new FileWriter(files[0]);
			//open a buffer writer with the file writer 
			BufferedWriter bw = new BufferedWriter(fw);
			//write the query to file
			bw.write(toWrite);
			//close the file
			bw.close();

		} catch (IOException e) {
			//set the boolean to false
			ok = false;
			logger.error("Fail to write into the file "
					+ files[0].getAbsolutePath());
		}
	}
	return false;
}
+-----------------+

	With the last method complete the entire action is finished and ready for use.