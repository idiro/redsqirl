package idiro.workflow.server.datatype;

import idiro.hadoop.NameNodeVar;
import idiro.hadoop.checker.HdfsFileChecker;
import idiro.utils.RandomString;
import idiro.workflow.server.DataOutput;
import idiro.workflow.server.OozieManager;
import idiro.workflow.server.connect.HDFSInterface;
import idiro.workflow.server.enumeration.DataBrowser;
import idiro.workflow.server.enumeration.FeatureType;

import java.io.File;
import java.io.IOException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.PathFilter;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * Map-Reduce Text output type.
 * Output given when an algorithm return a 
 * text format map-reduce directory.
 * 
 * @author etienne
 *
 */
public class MapRedTextType extends DataOutput{


	/**
	 * 
	 */
	private static final long serialVersionUID = 8260229620701006942L;

	public final static String key_delimiter = "delimiter";

	protected static HDFSInterface hdfsInt;

	public MapRedTextType() throws RemoteException {
		super();
		if(hdfsInt == null){
			hdfsInt = new HDFSInterface();
		}
	}

	public MapRedTextType(Map<String,FeatureType> features) throws RemoteException {
		super(features);
		if(hdfsInt == null){
			hdfsInt = new HDFSInterface();
		}
	}
	

	@Override
	public String getTypeName() throws RemoteException {
		return "TEXT MAP-REDUCE DIRECTORY";
	}

	@Override
	public DataBrowser getBrowser() throws RemoteException {
		return DataBrowser.HDFS;
	}

	@Override
	public void generatePath(String userName, String component,
			String outputName) throws RemoteException {
		setPath("/user/"+userName+
				"/tmp/idm_"+
				component+"_"+
				outputName+"_"+
				RandomString.getRandomName(8));
	}

	@Override
	public String isPathValid() throws RemoteException {
		String error = null;
		HdfsFileChecker hCh = new HdfsFileChecker(getPath());
		if(!hCh.isInitialized() || 
				hCh.isFile()){
			error = "The map reduce directory is a file";
		}else{
			final FileSystem fs;
			try {
				fs = NameNodeVar.getFS();
				hCh.setPath(new Path(getPath()).getParent());
				if(!hCh.isDirectory()){
					error = "The parent of the file does not exists";
				}
				FileStatus[] stat = fs.listStatus(new Path(getPath()),
						new PathFilter() {

					@Override
					public boolean accept(Path arg0) {
						return !arg0.getName().startsWith("_");
					}
				});
				for(int i = 0; i < stat.length && error == null; ++i){
					if(stat[i].isDir()){
						error = "The path "+getPath()+" is not a map-reduce directory";
					}
				}
				fs.close();
			} catch (IOException e) {
				error = "Unexpected error: "+e.getMessage();
				logger.error(error);
			}

		}
		hCh.close();
		return error;
	}

	@Override
	public boolean isPathAutoGeneratedForUser(String userName,
			String component, String outputName) throws RemoteException {
		return getPath().startsWith("/user/"+userName+
				"/tmp/idm_"+
				component+"_"+
				outputName+"_");
	}

	@Override
	public boolean isPathExists() throws RemoteException {
		boolean ok = false;
		HdfsFileChecker hCh = new HdfsFileChecker(getPath());
		if(hCh.isDirectory()){
			ok = true;
		}
		hCh.close();
		return ok;
	}

	@Override
	public String remove() throws RemoteException {
		return hdfsInt.delete(getPath());
	}

	@Override
	public boolean oozieRemove(Document oozieDoc, Element action,
			File localDirectory, String pathFromOozieDir,
			String fileNameWithoutExtension) throws RemoteException {
		Element fs = oozieDoc.createElement("fs");
		action.appendChild(fs);

		Element rm = oozieDoc.createElement("delete");
		rm.setAttribute("path", "${"+OozieManager.prop_namenode+"}"+getPath());
		fs.appendChild(rm);

		return true;
	}
	
	@Override
	public List<String> select(int maxToRead) throws RemoteException {
		List<String> ans = null;
		if(isPathValid() == null && isPathExists()){
			try {
				final FileSystem fs = NameNodeVar.getFS();
				FileStatus[] stat = fs.listStatus(new Path(getPath()),
						new PathFilter() {

					@Override
					public boolean accept(Path arg0) {
						return !arg0.getName().startsWith("_");
					}
				});
				ans = new ArrayList<String>(maxToRead);
				for(int i = 0; i < stat.length; ++i){
					ans.addAll(
							hdfsInt.select(stat[i].getPath().toString(),
									(maxToRead/stat.length)+1)
									);
				}
			} catch (IOException e) {
				String error = "Unexpected error: "+e.getMessage();
				logger.error(error);
				ans = null;
			}
		}
		return ans;
	}

}
