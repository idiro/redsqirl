/** 
 *  Copyright Â© 2016 Red Sqirl, Ltd. All rights reserved.
 *  Red Sqirl, Clarendon House, 34 Clarendon St., Dublin 2. Ireland
 *
 *  This file is part of Red Sqirl
 *
 *  User agrees that use of this software is governed by: 
 *  (1) the applicable user limitations and specified terms and conditions of 
 *      the license agreement which has been entered into with Red Sqirl; and 
 *  (2) the proprietary and restricted rights notices included in this software.
 *  
 *  WARNING: THE PROPRIETARY INFORMATION OF Red Sqirl IS PROTECTED BY IRISH AND 
 *  INTERNATIONAL LAW.  UNAUTHORISED REPRODUCTION, DISTRIBUTION OR ANY PORTION
 *  OF IT, MAY RESULT IN CIVIL AND/OR CRIMINAL PENALTIES.
 *  
 *  If you have received this software in error please contact Red Sqirl at 
 *  support@redsqirl.com
 */

package com.redsqirl.workflow.server.datatype;



import java.rmi.RemoteException;
import java.util.LinkedList;
import java.util.List;

import com.idiro.utils.RandomString;
import com.redsqirl.utils.FieldList;

/**
 * Class to read files that are stored in MapReduce Directories and are stored
 * as Binary format
 * 
 * @author keith
 * 
 */
public class MapRedCompressedType extends MapRedTextType {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6720621203419913600L;
	/**
	 * Delimier
	 */
	public static final String delim = "\001";

	/**
	 * Default Constructor
	 * 
	 * @throws RemoteException
	 */
	public MapRedCompressedType() throws RemoteException {
		super();
		setHeaderEditorOnBrowser(true);
	}

	/**
	 * Constructor with FieldList
	 * 
	 * @param fields
	 * @throws RemoteException
	 */
	public MapRedCompressedType(FieldList fields) throws RemoteException {
		super(fields);
		setHeaderEditorOnBrowser(true);
	}

	/**
	 * Get the Type name
	 */
	@Override
	public String getTypeName() throws RemoteException {
		return "COMPRESSED MAP-REDUCE DIRECTORY";
	}
	
	@Override
	public String[] getExtensions() throws RemoteException {
		return new String[]{"*.bz2","*.bz"};
	}

	/**
	 * Check if the path is a valid path
	 * 
	 * @return Error Message
	 * @throws RemoteException
	 */
	@Override
	public String isPathValid(String path) throws RemoteException {
		List<String> shouldHaveExt = new LinkedList<String>();
		shouldHaveExt.add(".bz");
		shouldHaveExt.add(".bz2");
		return isPathValid(path,null,shouldHaveExt,true);
	}
	
	/**
	 * Gernate a path given values
	 * 
	 * @param userName
	 * @param component
	 * @param outputName
	 * @return generated path
	 * @throws RemoteException
	 */
	@Override
	public String generatePathStr(String userName, String component,
			String outputName) throws RemoteException {
		return "/user/" + userName + "/tmp/redsqirl_" + component + "_" + outputName
				+ "_" + RandomString.getRandomName(8)+".bz2";
	}
	
	public boolean isPathAutoGeneratedForUser(String userName,
			String component, String outputName) throws RemoteException {
		return getPath().startsWith(
				"/user/" + userName + "/tmp/redsqirl_" + component + "_"
						+ outputName + "_") && getPath().endsWith(".bz2");
	}
	
	/**
	 * Get the Colour of the type
	 * 
	 * @return colour
	 * 
	 */
	protected String getDefaultColor() {
		return "DodgerBlue";
	}
}
